library(readr)
disease_sim <- read_csv("data/disease_sim.csv")
View(disease_sim)
disease_symtoms <- read_csv("data/disease_data.csv")
View(disease_symtoms)
install.packages("disparityfilter")
library(disparityfilter)
typeof(disease_sim)
disease_sim
disease_sim$`symptom similarity score`
typeof(disease_sim$`symptom similarity score`)
typeof(disease_sim$`symptom similarity score`[0,])
typeof(disease_sim$`symptom similarity score`[0,10])
disease_sim$`symptom similarity score`[2]
disease_sim$`symptom similarity score`[1:10]
disease_sim$`symptom similarity score`[1,]
disease_sim$`symptom similarity score`[1,2]
disease_sim$`symptom similarity score`[1:]
disease_sim$`symptom similarity score`[:]
disease_sim$`symptom similarity score`[]
disease_sim$`symptom similarity score`[,]
disease_sim$`symptom similarity score`[][]
disease_sim$`symptom similarity score`[][2]
disease_sim$`symptom similarity score`[2]
library(sna)
library(igraph)
#Load the package SNA (Social Network Analysis Library)
#Load the package igraph (Network analysis and visualization)
library(sna)
library(igraph)
library(readr)
disease_sim <- read_csv("data/disease_sim.csv")
disease_symtoms <- read_csv("data/disease_data.csv")
# define function to plot a graph
plotG <- function(g) {
plot(g,
# force-directed layout
layout=layout.fruchterman.reingold,
#vertex.label=NA,
vertex.label.font=2, vertex.size=5,
vertex.color="blue",
vertex.frame.color=FALSE,
edge.color="black")
}
install.packages("disparityfilter")
library(disparityfilter)
g <- graph.data.frame(disease_sim, directed=FALSE)
View(g)
View(disease_sim)
grouping(disease_sim$`MeSH Disease Term`)
summary(disease_sim)
structure(disease_sim)
summary(disease_sim$`MeSH Disease Term`)
plotG(g)
View(disease_sim)
plot(g, edge.width=E(g)$disease_sim$`symptom similarity score`)
plot(g, edge.width=E(g)$`symptom similarity score`)
colnames(disease_sim)<- c("from","to","weights")
View(disease_sim)
g <- graph.data.frame(disease_sim, directed=FALSE)
plot(g, edge.width=E(g)$weights)
backbone(g, weights = igraph::E(graph)$weight,
directed = igraph::is_directed(g), alpha = 0.05)
backbone(g, weights = igraph::E(g)$weight,
directed = igraph::is_directed(g), alpha = 0.05)
E(g)
E(g)$weights
isdirected(g)
igraph::is_directed(g)
backbone(g, weights = igraph::E(g)$weights,
directed = igraph::is_directed(g), alpha = 0.05)
plot(g)
bb<-backbone(g, weights = igraph::E(g)$weights,
directed = igraph::is_directed(g), alpha = 0.05)
View(bb)
rm(bb)
G_backbone = get.backbone(g, weights = igraph::E(g)$weights,
directed = igraph::is_directed(g), alpha = 0.05)
gden(g,mode="graph")
is.connected(g)
connectedness(g)
degree(g)
E(g)
len(E(g))
length(E(g))
summary(E(g)$weights)
degree(g)
igraph::degree(g)
igraph::gden(g)
gden(g)
sna::gden(g)
igraph::gden(g)
library("rattle", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
rattle()
